AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Gio-A3-Lambdas

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  GioA3RawDocumentsBucket:
    Type: 'AWS::S3::Bucket'
  GioA3RawDocumentsBucketNotifications:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler
          - Arn
      BucketName:
        Ref: GioA3RawDocumentsBucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - DocumentRegistrationFunction
                - Arn
          - Events:
              - s3:ObjectRemoved:Delete
            LambdaFunctionArn:
              Fn::GetAtt:
                - DocumentRegistrationFunction
                - Arn
      Managed: true
    DependsOn:
      - GioA3RawDocumentsBucketAllowBucketNotificationsToGioA3TextractPipelineStackGioA3DocumentRegistrar
  GioA3RawDocumentsBucketAllowBucketNotificationsToGioA3TextractPipelineStackGioA3DocumentRegistrar:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - DocumentRegistrationFunction
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - GioA3RawDocumentsBucket
          - Arn
  # Bucket2:
  #   Type: 'AWS::S3::Bucket'
  PythonHelperFunctionsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "python-helper-functions-layer"
      CompatibleRuntimes:
        - python3.7
      ContentUri: ./helper_functions_layer  # (OR) S3://location
      RetentionPolicy: Delete
  DataUploadFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: GIO-A3-Data-Upload/
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: arn:aws:iam::533793656583:role/GIO_A3_DeveloperRole
      Architectures:
        - x86_64
      Events:
        DataUpload:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /fetch-data
            Method: post
      Environment:
        Variables:
          S3_RAW_BUCKET: !Ref GioA3RawDocumentsBucket
  DocumentRegistrationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: GIO-A3-Document-Registrar/
      Handler: app.lambda_handler
      Runtime: python3.7
      Layers:
        - !Ref PythonHelperFunctionsLayer
      Role: arn:aws:iam::533793656583:role/GIO_A3_DeveloperRole
      Architectures:
        - x86_64     
  BucketNotificationsHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
              response_status = "SUCCESS"
              error_message = ""
              try:
                  props = event["ResourceProperties"]
                  bucket = props["BucketName"]
                  notification_configuration = props["NotificationConfiguration"]
                  request_type = event["RequestType"]
                  managed = props.get('Managed', 'true').lower() == 'true'
                  stack_id = event['StackId']

                  if managed:
                    config = handle_managed(request_type, notification_configuration)
                  else:
                    config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

                  put_bucket_notification_configuration(bucket, config)
              except Exception as e:
                  logging.exception("Failed to put bucket notification configuration")
                  response_status = "FAILED"
                  error_message = f"Error: {str(e)}. "
              finally:
                  submit_response(event, context, response_status, error_message)


          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration


          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):

            # find external notifications
            external_notifications = find_external_notifications(bucket, stack_id)

            # if delete, that's all we need
            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            # otherwise, merge external with incoming config and augment with id
            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming
            return notifications


          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              # if the notification was created by us, we know what id to expect
              # so we can filter by it.
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            return external_notifications


          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)


          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


          def submit_response(event: dict, context, response_status: str, error_message: str):
              response_body = json.dumps(
                  {
                      "Status": response_status,
                      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                      "StackId": event["StackId"],
                      "RequestId": event["RequestId"],
                      "LogicalResourceId": event["LogicalResourceId"],
                      "NoEcho": False,
                  }
              ).encode("utf-8")
              headers = {"content-type": "", "content-length": str(len(response_body))}
              try:
                  req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
                  with urllib.request.urlopen(req) as response:
                      print(response.read().decode("utf-8"))
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role: arn:aws:iam::533793656583:role/GIO_A3_DeveloperRole
      Runtime: python3.7
      Timeout: 300
    
      # Events:
      #   S3OjbectCreatedEvent:
      #     Type: S3
      #     Properties:
      #       Bucket:
      #         Ref: RawBucket     # This must be the name of an S3 bucket declared in the same template file
      #       Events: s3:ObjectRemoved:Delete
      # Events:
      #   S3OjbectRemovedEvent:
      #     Type: S3
      #     Properties:
      #       Bucket:
      #         Ref: RawBucket     # This must be the name of an S3 bucket declared in the same template file
      #       Events: s3:ObjectCreated:*



Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  DataUploadApi:
    Description: "API Gateway endpoint URL for Prod stage for Data Upload function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/fetch-data/"
  DataUploadFunction:
    Description: "Data Upload Lambda Function ARN"
    Value: !GetAtt DataUploadFunction.Arn
  DocumentRegistrationFunction:
    Description: "Document Registration Lambda Function ARN"
    Value: !GetAtt DocumentRegistrationFunction.Arn  
